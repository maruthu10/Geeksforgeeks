
from typing import List


 


class Solution:
    def countPartitions(self, n : int, d : int, arr : List[int]) -> int:
        # Stores the sum of all the elements in the array.
        totalSum = 0
        mod = 10**9 + 7
        
        #  Iterate over the array and add the element to 'totalSum'.
        for i in range(n):
            totalSum += arr[i]
    
        # If totalSum is less than 'D', or their difference is odd.
        if (totalSum < d or (totalSum - d) % 2):
            # Then no partitions are possible.
            return 0
    
        # We want to find the number of subsets, with subset sum target.
        target = (totalSum - d) // 2
        
        # create a prev_dp where prev_dp[i] represents number of ways to get sum i by taking no element from arr. 
        pre_dp = [0]*(target+1)
        # If we want to find the number of subsets with sum 0,
        # but considering 0 elements, only way is take an empty subset.
        pre_dp[0]  = 1
    
        
    
        for i in range(1, n + 1):
            curr_dp = [0]*(target+1)
            for j in range(target + 1):
    
                # Take the entry from the previous row
                not_pick = pre_dp[j]
                
    
                # If we include this element.
                pick = 0
                if (j >= arr[i - 1]):
                    pick = (pre_dp[j - arr[i - 1]]) 
                    
                curr_dp[j] = (not_pick + pick)%mod    
                
            pre_dp = curr_dp[:]    
    
        #  Return the answer
        return pre_dp[target]
